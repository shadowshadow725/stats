q4beta_err = s_sq[1,1]*solve(t(x)%*%x)
print("betahat")
q4betahat
print("s(betahat)")
q4beta_err
print("The estimated beta are reasonable close to the true values considering it is only from one experiment")
newfit = lm(newy~x1+x2)
summary(newfit)
epsilon=round(rnorm(100,mean=0,sd=2),2)
y = beta0 + beta1*x1 + beta2*x2 + epsilon
fit = lm(y~ x1 + x2)
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
text(4, 9, expression(hat(beta) == beta1hat))
par(mfrow = c(2, 2))
hist(array_beta0)
text(4, 9, expression(hat(beta) == beta0hat))
text(3, 9, expression("beta0" == 0.5))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
text(1, 3, expression(hat(beta) == beta0hat))
text(3, 9, expression("beta0" == 0.5))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
alpha=0.05
p=2
bound = qt(alpha, 100-p-1)
beta0hatlower = array_beta0 + bound*array_beta0err
beta0hatupper = array_beta0 - bound*array_beta0err
print("beta0 CI lower")
beta0hatlower
print("beta0 CI upper")
beta0hatupper
beta1hatlower = array_beta1 + bound*array_beta1err
beta1hatupper = array_beta1 - bound*array_beta1err
print("beta1 CI lower")
beta1hatlower
print("beta1 CI upper")
beta1hatupper
beta2hatlower = array_beta2 + bound*array_beta2err
beta2hatupper = array_beta2 - bound*array_beta2err
print("beta2 CI lower")
beta2hatlower
print("beta2 CI upper")
beta2hatupper
cpbeta0 = 0
cpbeta1 = 0
cpbeta2 = 0
for(loop_index in 1:num_simulations){
if (beta0 >= beta0hatlower[loop_index] && beta0<= beta0hatupper[loop_index]) {
cpbeta0 = cpbeta0 + 1
}
if (beta1 >= beta1hatlower[loop_index] && beta1<= beta1hatupper[loop_index]) {
cpbeta1 = cpbeta1 + 1
}
if (beta2 >= beta2hatlower[loop_index] && beta2<= beta2hatupper[loop_index]) {
cpbeta2 = cpbeta2 + 1
}
}
print("coverage probability for beta0, beta1, beta2")
cpbeta0/num_simulations
cpbeta1/num_simulations
cpbeta2/num_simulations
par(mfrow = c(2, 2))
hist(array_beta0)
text(1, 1, expression(hat(beta) == beta0hat))
text(3, 9, expression("beta0" == 0.5))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0, breaks = 10)
abline(v=c(beta0,beta0hat))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0, breaks = 10)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
hist(array_beta1)
text(4, 9, expression(hat(beta) == beta1hat))
text(3, 9, expression("beta1" == 2))
hist(array_beta2)
text(4, 9, expression(hat(beta) == beta2hat))
text(3, 9, expression("beta2" == 1))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0, breaks = 10)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.1)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"))
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 1", "beta 1 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 2", "beta 2 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
print("The histogram is all normally distributed, this is because the epsilon is normally distributed which makes the model normally distributed and this will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 1", "beta 1 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 2", "beta 2 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
print("The histogram is all normally distributed, this is because the epsilon \nis normally distributed which makes the model normally distributed and this \n will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference between the mean and the true value is caused by the epsilon")
n=100
student_id = 1005426549
set.seed(student_id)
mainseq = seq(1,15, length = n)
x1 = sample(mainseq, 100, replace = TRUE)
x2 = sample(mainseq, 100, replace = TRUE)
beta0 = 0.5
beta1 = 2
beta2 = 1
I=rep(1,100)
x=cbind(I, x1, x2)
xx=t(x)%*%x
xx
xxinv=solve(xx)
xxinv
cor(x1,x2)
betas = as.vector(cbind(beta0, beta1, beta2))
print("The correlation makes sense because both x1 and x2 are chosen from the")
print("same sequence with replace=TRUE")
epsilon=round(rnorm(100,mean=0,sd=2),2)
y = beta0 + beta1*x1 + beta2*x2 + epsilon
fit = lm(y~ x1 + x2)
summary(fit)
newy = x%*%betas
newy = newy+epsilon
q4betahat = solve(t(x) %*% x) %*%t(x) %*% newy
proj = x%*%solve(t(x) %*% x)%*%t(x)
q4err = (diag(dim(proj)[1])-proj)%*%newy
s_sq = t(q4err) %*% q4err/(n-3)
q4beta_err = s_sq[1,1]*solve(t(x)%*%x)
print("betahat")
q4betahat
print("s(betahat)")
q4beta_err
print("The estimated beta are reasonable close to the true values ")
print("considering it is only from one experiment")
newfit = lm(newy~x1+x2)
summary(newfit)
print("The lm is the same because they are created using the same x1, x2, epsilon")
q5func <- function() {
q5x1 = sample(mainseq, 100, replace = TRUE)
q5x2 = sample(mainseq, 100, replace = TRUE)
q5i = rep(1,100)
q5epsilon = round(rnorm(100,mean=0,sd=2),2)
q5x = cbind(q5i, q5x1, q5x2)
q5y = q5x%*%betas
q5y=q5y+q5epsilon
q5fit = lm(q5y ~ q5x1+q5x2)
return(q5fit)
}
num_simulations = 1000
array_beta0 <- vector(length=num_simulations)
array_beta1 <- vector(length=num_simulations)
array_beta2 <- vector(length=num_simulations)
array_beta0err <- vector(length=num_simulations)
array_beta1err <- vector(length=num_simulations)
array_beta2err <- vector(length=num_simulations)
for(loop_index in 1:num_simulations){
tmp = q5func()
array_beta0[loop_index] = tmp$coefficients[1]
array_beta1[loop_index] = tmp$coefficients[2]
array_beta2[loop_index] = tmp$coefficients[3]
array_beta0err[loop_index] = summary(tmp)$coefficients[1,2]
array_beta1err[loop_index] = summary(tmp)$coefficients[2,2]
array_beta2err[loop_index] = summary(tmp)$coefficients[3,2]
}
beta0hat=sum(array_beta0)/num_simulations
beta1hat=sum(array_beta1)/num_simulations
beta2hat=sum(array_beta2)/num_simulations
beta0hat
beta1hat
beta2hat
beta0stderr = sum(array_beta0err)/num_simulations
beta1stderr = sum(array_beta1err)/num_simulations
beta2stderr = sum(array_beta2err)/num_simulations
beta0stderr
beta1stderr
beta2stderr
par(mfrow = c(2, 2))
hist(array_beta0)
abline(v=c(beta0,beta0hat), col=c("blue", "red"))
legend("topright",c("beta 0", "beta 0 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta1)
abline(v=c(beta1,beta1hat), col=c("blue", "red"))
legend("topright",c("beta 1", "beta 1 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
hist(array_beta2)
abline(v=c(beta2,beta2hat), col=c("blue", "red"))
legend("topright",c("beta 2", "beta 2 hat"), col=c("blue", "red"), lwd=5, cex=0.5)
print("The histogram is all normally distributed. ")
print("This is because the epsilon is normally distributed ")
print("which makes the model normally distributed and")
print("this  will make the estimate of beta 0, 1, 2 normally distributed")
print("mean of beta 0, 1, 2")
beta0hat
beta1hat
beta2hat
print("The means are very close to the true value, and the small difference ")
print("between the mean and the true value is caused by the epsilon")
alpha=0.05
p=2
bound = qt(alpha, 100-p-1)
beta0hatlower = array_beta0 + bound*array_beta0err
beta0hatupper = array_beta0 - bound*array_beta0err
print("beta0 CI lower")
beta0hatlower
print("beta0 CI upper")
beta0hatupper
beta1hatlower = array_beta1 + bound*array_beta1err
beta1hatupper = array_beta1 - bound*array_beta1err
print("beta1 CI lower")
beta1hatlower
print("beta1 CI upper")
beta1hatupper
beta2hatlower = array_beta2 + bound*array_beta2err
beta2hatupper = array_beta2 - bound*array_beta2err
print("beta2 CI lower")
beta2hatlower
print("beta2 CI upper")
beta2hatupper
cpbeta0 = 0
cpbeta1 = 0
cpbeta2 = 0
for(loop_index in 1:num_simulations){
if (beta0 >= beta0hatlower[loop_index] && beta0<= beta0hatupper[loop_index]) {
cpbeta0 = cpbeta0 + 1
}
if (beta1 >= beta1hatlower[loop_index] && beta1<= beta1hatupper[loop_index]) {
cpbeta1 = cpbeta1 + 1
}
if (beta2 >= beta2hatlower[loop_index] && beta2<= beta2hatupper[loop_index]) {
cpbeta2 = cpbeta2 + 1
}
}
print("Not all CI contain the true value, this is because of the epsilon")
print("coverage probability for beta0, beta1, beta2")
cpbeta0/num_simulations
cpbeta1/num_simulations
cpbeta2/num_simulations
setwd("E:/OneDrive - University of Toronto/STA302")
# please import the data set before running this r code
# set cwd to the same folder as the rmd file and put the data set in the same folder
sat=read.csv('data.csv', header=TRUE)
library(tidyverse)
# cleaning some rows
data$STA302.hours..W3.[44]=5.5
# please import the data set before running this r code
# set cwd to the same folder as the rmd file and put the data set in the same folder
data=read.csv('data.csv', header=TRUE)
library(tidyverse)
# cleaning some rows
data$STA302.hours..W3.[44]=5.5
data$STA302.hours..W3.[124]=7.5
# remove rows where quiz 4 mark = NA
noquiz4na = which(!is.na(data$Quiz_4_score))
noquiz4na
data = data[noquiz4na,]
datasize = length(data$X)
pairs(~ Quiz_1_score +  Quiz_2_score + Quiz_3_score+ Quiz_4_score, data = data)
pairs(~ COVID.hours..W1. +  COVID.hours..W2. + COVID.hours..W3., data = data)
pairs(~ STA302.hours..W1. +  STA302.hours..W2. + as.numeric(STA302.hours..W3.), data = data)
pairs(~ Quiz_1_score+ as.numeric(STA302.hours..W1.) + COVID.hours..W1., data = data)
avg_testscore <- vector(length=datasize)
for(loop_index in 1:datasize){
numerator = 0
denominator = 0
if (!is.na(data$Quiz_1_score[loop_index])){
numerator = numerator + data$Quiz_1_score[loop_index]
denominator = denominator + 1
}
if (!is.na(data$Quiz_2_score[loop_index])){
numerator = numerator + data$Quiz_2_score[loop_index]
denominator = denominator + 1
}
if (!is.na(data$Quiz_3_score[loop_index])){
numerator = numerator + data$Quiz_3_score[loop_index]
denominator = denominator + 1
}
avg_testscore[loop_index] = numerator/denominator
}
avg_testscore
avg_covid <- vector(length=datasize)
for(loop_index in 1:datasize){
numerator = 0
denominator = 0
if (!is.na(data$ COVID.hours..W1[loop_index])){
numerator = numerator + data$COVID.hours..W1[loop_index]
denominator = denominator + 1
}
if (!is.na(data$COVID.hours..W2[loop_index])){
numerator = numerator + data$COVID.hours..W2[loop_index]
denominator = denominator + 1
}
if (!is.na(data$COVID.hours..W3[loop_index])){
numerator = numerator + data$COVID.hours..W3[loop_index]
denominator = denominator + 1
}
avg_covid[loop_index] = numerator/denominator
}
avg_covid
avg_study <- vector(length=datasize)
for(loop_index in 1:datasize){
numerator = 0
denominator = 0
if (!is.na(as.numeric(data$STA302.hours..W1.)[loop_index])){
numerator = numerator + as.numeric(data$STA302.hours..W1.)[loop_index]
denominator = denominator + 1
}
if (!is.na(as.numeric(data$STA302.hours..W2.)[loop_index])){
numerator = numerator + as.numeric(data$STA302.hours..W2.)[loop_index]
denominator = denominator + 1
}
if (!is.na(as.numeric(data$STA302.hours..W3.)[loop_index])){
numerator = numerator + as.numeric(data$STA302.hours..W3.)[loop_index]
denominator = denominator + 1
}
avg_study[loop_index] = numerator/denominator
}
avg_study
pairs(~ avg_testscore + data$Quiz_4_score)
pairs(~ avg_covid + data$Quiz_4_score)
pairs(~ avg_study + data$Quiz_4_score)
fit1 = lm(data$Quiz_4_score~avg_covid)
summary(fit1)
fit2 = lm(data$Quiz_4_score~avg_testscore)
summary(fit2)
fit3 = lm(data$Quiz_4_score~avg_study)
summary(fit3)
